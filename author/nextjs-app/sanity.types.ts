/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type CallToAction = {
  _type: "callToAction";
  heading?: string;
  text?: string;
  buttonText?: string;
  link?: Link;
};

export type InfoSection = {
  _type: "infoSection";
  heading?: string;
  subheading?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      linkType?: "href" | "page" | "blog";
      href?: string;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      blog?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "blog";
      };
      openInNewTab?: boolean;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    linkType?: "href" | "page" | "blog";
    href?: string;
    page?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "page";
    };
    blog?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "blog";
    };
    openInNewTab?: boolean;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Book = {
  _id: string;
  _type: "book";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  excerpt?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  date?: string;
  publicationDate?: string;
  isbn?: string;
  amazonLink?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
};

export type Devotional = {
  _id: string;
  _type: "devotional";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  scriptureReference?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  publicationDate?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
  content?: BlockContent;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  heading?: string;
  subheading?: string;
  pageBuilder?: Array<{
    _key: string;
  } & CallToAction | {
    _key: string;
  } & InfoSection>;
};

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  publicationDate?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
  content?: BlockContent;
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  picture?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type NavigationSettings = {
  _id: string;
  _type: "navigationSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  mainNav?: Array<{
    title?: string;
    link?: Link;
    _key: string;
  }>;
};

export type Link = {
  _type: "link";
  linkType?: "href" | "page" | "blog" | "devotional" | "book";
  href?: string;
  page?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  blog?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "blog";
  };
  devotional?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "devotional";
  };
  book?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "book";
  };
  openInNewTab?: boolean;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: "image";
  };
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = CallToAction | InfoSection | BlockContent | Book | Devotional | Page | Blog | Person | NavigationSettings | Link | Settings | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_id == "siteSettings"][0]{    title,    description,    ogImage {   asset->{    _id,    _ref,    url  },  alt },    backgroundImage {   asset->{    _id,    _ref,    url  },  alt },    logo {   asset->{    _id,    _ref,    url  },  alt }  }
export type SettingsQueryResult = {
  title: null;
  description: null;
  ogImage: null;
  backgroundImage: null;
  logo: null;
} | {
  title: string | null;
  description: null;
  ogImage: null;
  backgroundImage: null;
  logo: null;
} | {
  title: string | null;
  description: string | null;
  ogImage: null;
  backgroundImage: null;
  logo: null;
} | {
  title: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  ogImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  backgroundImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: null;
  } | null;
  logo: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: null;
  } | null;
} | null;
// Variable: sitemapData
// Query: *[(_type in ["page", "blog", "devotional", "book"]) && defined(slug.current)] | order(_type asc){    "slug": slug.current,    _type,    _updatedAt  }
export type SitemapDataResult = Array<{
  slug: string | null;
  _type: "blog";
  _updatedAt: string;
} | {
  slug: string | null;
  _type: "book";
  _updatedAt: string;
} | {
  slug: string | null;
  _type: "devotional";
  _updatedAt: string;
} | {
  slug: string | null;
  _type: "page";
  _updatedAt: string;
}>;
// Variable: allBlogsQuery
// Query: *[_type == "blog" && defined(slug.current)] | order(publicationDate desc, _updatedAt desc){      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type AllBlogsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
}>;
// Variable: singleBlogQuery
// Query: *[_type == "blog" && slug.current == $slug][0]{    content[]{      ...,      markDefs[]{ ...,   _type,  _key,  "pageSlug": page->slug.current,  "blogSlug": blog->slug.current,  "devotionalSlug": devotional->slug.current,  "bookSlug": book->slug.current,  href,  openInNewTab }    },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type SingleBlogQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      linkType?: "blog" | "href" | "page";
      href: string | null;
      page?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      };
      blog?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "blog";
      };
      openInNewTab: boolean | null;
      _type: "link";
      _key: string;
      pageSlug: string | null;
      blogSlug: string | null;
      devotionalSlug: null;
      bookSlug: null;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
} | null;
// Variable: moreBlogsQuery
// Query: *[_type == "blog" && _id != $skip && defined(slug.current)] | order(publicationDate desc, _updatedAt desc)[0...$limit]{      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type MoreBlogsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
}>;
// Variable: blogSlugs
// Query: *[_type == "blog" && defined(slug.current)]{    "slug": slug.current  }
export type BlogSlugsResult = Array<{
  slug: string | null;
}>;
// Variable: allDevotionalsQuery
// Query: *[_type == "devotional" && defined(slug.current)] | order(publicationDate desc, _updatedAt desc){      _id,  _type,  title,  slug { current },  scriptureReference,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type AllDevotionalsQueryResult = Array<{
  _id: string;
  _type: "devotional";
  title: string | null;
  slug: {
    current: string | null;
  } | null;
  scriptureReference: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
}>;
// Variable: moreDevotionalsQuery
// Query: *[_type == "devotional" && _id != $skip && defined(slug.current)] | order(publicationDate desc, _updatedAt desc)[0...$limit]{      _id,  _type,  title,  slug { current },  scriptureReference,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type MoreDevotionalsQueryResult = Array<{
  _id: string;
  _type: "devotional";
  title: string | null;
  slug: {
    current: string | null;
  } | null;
  scriptureReference: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
}>;
// Variable: singleDevotionalQuery
// Query: *[_type == "devotional" && slug.current == $slug][0]{    content[] {      _type,      _key,      style,      children[] { _type, _key, text, marks },      markDefs[] {        _type,        _key,        "pageSlug": page->slug.current,        "blogSlug": blog->slug.current,        "devotionalSlug": devotional->slug.current,        "bookSlug": book->slug.current,        href,        openInNewTab      }    },      _id,  _type,  title,  slug { current },  scriptureReference,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type SingleDevotionalQueryResult = {
  content: Array<{
    _type: "block";
    _key: string;
    style: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal" | null;
    children: Array<{
      _type: "span";
      _key: string;
      text: string | null;
      marks: Array<string> | null;
    }> | null;
    markDefs: Array<{
      _type: "link";
      _key: string;
      pageSlug: string | null;
      blogSlug: string | null;
      devotionalSlug: null;
      bookSlug: null;
      href: string | null;
      openInNewTab: boolean | null;
    }> | null;
  }> | null;
  _id: string;
  _type: "devotional";
  title: string | null;
  slug: {
    current: string | null;
  } | null;
  scriptureReference: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
} | null;
// Variable: devotionalSlugs
// Query: *[_type == "devotional" && defined(slug.current)]{    slug { current }  }
export type DevotionalSlugsResult = Array<{
  slug: {
    current: string | null;
  } | null;
}>;
// Variable: allBooksQuery
// Query: *[_type == "book" && defined(slug.current)] | order(publicationDate desc, _updatedAt desc){      _id,  _type,  _createdAt,  _updatedAt,  _rev,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  excerpt,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,  isbn,  amazonLink,  "date": coalesce(date, _updatedAt),    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type AllBooksQueryResult = Array<{
  _id: string;
  _type: "book";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  description: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  isbn: string | null;
  amazonLink: string | null;
  date: string;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
}>;
// Variable: singleBookQuery
// Query: *[_type == "book" && slug.current == $slug][0]{    content[]{      ...,      markDefs[]{ ...,   _type,  _key,  "pageSlug": page->slug.current,  "blogSlug": blog->slug.current,  "devotionalSlug": devotional->slug.current,  "bookSlug": book->slug.current,  href,  openInNewTab }    },      _id,  _type,  _createdAt,  _updatedAt,  _rev,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  excerpt,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,  isbn,  amazonLink,  "date": coalesce(date, _updatedAt),    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type SingleBookQueryResult = {
  content: null;
  _id: string;
  _type: "book";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  description: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  isbn: string | null;
  amazonLink: string | null;
  date: string;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
} | null;
// Variable: moreBooksQuery
// Query: *[_type == "book" && _id != $skip && defined(slug.current)] | order(publicationDate desc, _updatedAt desc)[0...$limit]{      _id,  _type,  _createdAt,  _updatedAt,  _rev,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  description,  excerpt,  coverImage {   asset->{    _id,    _ref,    url  },  alt },  publicationDate,  isbn,  amazonLink,  "date": coalesce(date, _updatedAt),    author->{ _id, firstName, lastName, picture {   asset->{    _id,    _ref,    url  },  alt } }  }
export type MoreBooksQueryResult = Array<{
  _id: string;
  _type: "book";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  description: string | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      _id: string;
      _ref: null;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  publicationDate: string | null;
  isbn: string | null;
  amazonLink: string | null;
  date: string;
  author: {
    _id: string;
    firstName: string | null;
    lastName: string | null;
    picture: {
      asset: {
        _id: string;
        _ref: null;
        url: string | null;
      } | null;
      alt: string | null;
    } | null;
  } | null;
}>;
// Variable: bookSlugs
// Query: *[_type == "book" && defined(slug.current)]{    "slug": slug.current  }
export type BookSlugsResult = Array<{
  slug: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_id == \"siteSettings\"][0]{\n    title,\n    description,\n    ogImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n    backgroundImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n    logo { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n }\n  }\n": SettingsQueryResult;
    "\n  *[(_type in [\"page\", \"blog\", \"devotional\", \"book\"]) && defined(slug.current)] | order(_type asc){\n    \"slug\": slug.current,\n    _type,\n    _updatedAt\n  }\n": SitemapDataResult;
    "\n  *[_type == \"blog\" && defined(slug.current)] | order(publicationDate desc, _updatedAt desc){\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": AllBlogsQueryResult;
    "\n  *[_type == \"blog\" && slug.current == $slug][0]{\n    content[]{\n      ...,\n      markDefs[]{ ..., \n  _type,\n  _key,\n  \"pageSlug\": page->slug.current,\n  \"blogSlug\": blog->slug.current,\n  \"devotionalSlug\": devotional->slug.current,\n  \"bookSlug\": book->slug.current,\n  href,\n  openInNewTab\n }\n    },\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": SingleBlogQueryResult;
    "\n  *[_type == \"blog\" && _id != $skip && defined(slug.current)] | order(publicationDate desc, _updatedAt desc)[0...$limit]{\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": MoreBlogsQueryResult;
    "\n  *[_type == \"blog\" && defined(slug.current)]{\n    \"slug\": slug.current\n  }\n": BlogSlugsResult;
    "\n  *[_type == \"devotional\" && defined(slug.current)] | order(publicationDate desc, _updatedAt desc){\n    \n  _id,\n  _type,\n  title,\n  slug { current },\n  scriptureReference,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": AllDevotionalsQueryResult;
    "\n  *[_type == \"devotional\" && _id != $skip && defined(slug.current)] | order(publicationDate desc, _updatedAt desc)[0...$limit]{\n    \n  _id,\n  _type,\n  title,\n  slug { current },\n  scriptureReference,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": MoreDevotionalsQueryResult;
    "\n  *[_type == \"devotional\" && slug.current == $slug][0]{\n    content[] {\n      _type,\n      _key,\n      style,\n      children[] { _type, _key, text, marks },\n      markDefs[] {\n        _type,\n        _key,\n        \"pageSlug\": page->slug.current,\n        \"blogSlug\": blog->slug.current,\n        \"devotionalSlug\": devotional->slug.current,\n        \"bookSlug\": book->slug.current,\n        href,\n        openInNewTab\n      }\n    },\n    \n  _id,\n  _type,\n  title,\n  slug { current },\n  scriptureReference,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": SingleDevotionalQueryResult;
    "\n  *[_type == \"devotional\" && defined(slug.current)]{\n    slug { current }\n  }\n": DevotionalSlugsResult;
    "\n  *[_type == \"book\" && defined(slug.current)] | order(publicationDate desc, _updatedAt desc){\n    \n  _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  excerpt,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  isbn,\n  amazonLink,\n  \"date\": coalesce(date, _updatedAt),\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": AllBooksQueryResult;
    "\n  *[_type == \"book\" && slug.current == $slug][0]{\n    content[]{\n      ...,\n      markDefs[]{ ..., \n  _type,\n  _key,\n  \"pageSlug\": page->slug.current,\n  \"blogSlug\": blog->slug.current,\n  \"devotionalSlug\": devotional->slug.current,\n  \"bookSlug\": book->slug.current,\n  href,\n  openInNewTab\n }\n    },\n    \n  _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  excerpt,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  isbn,\n  amazonLink,\n  \"date\": coalesce(date, _updatedAt),\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": SingleBookQueryResult;
    "\n  *[_type == \"book\" && _id != $skip && defined(slug.current)] | order(publicationDate desc, _updatedAt desc)[0...$limit]{\n    \n  _id,\n  _type,\n  _createdAt,\n  _updatedAt,\n  _rev,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  description,\n  excerpt,\n  coverImage { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n },\n  publicationDate,\n  isbn,\n  amazonLink,\n  \"date\": coalesce(date, _updatedAt),\n  \n  author->{ _id, firstName, lastName, picture { \n  asset->{\n    _id,\n    _ref,\n    url\n  },\n  alt\n } }\n\n\n  }\n": MoreBooksQueryResult;
    "\n  *[_type == \"book\" && defined(slug.current)]{\n    \"slug\": slug.current\n  }\n": BookSlugsResult;
  }
}
